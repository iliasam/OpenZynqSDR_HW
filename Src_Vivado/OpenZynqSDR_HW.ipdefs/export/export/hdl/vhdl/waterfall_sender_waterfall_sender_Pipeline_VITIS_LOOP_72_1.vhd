-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity waterfall_sender_waterfall_sender_Pipeline_VITIS_LOOP_72_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_bus_TVALID : IN STD_LOGIC;
    m_axi_out_bus_AWVALID : OUT STD_LOGIC;
    m_axi_out_bus_AWREADY : IN STD_LOGIC;
    m_axi_out_bus_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_bus_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_bus_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_bus_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_bus_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_bus_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_bus_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_bus_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_bus_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_bus_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_WVALID : OUT STD_LOGIC;
    m_axi_out_bus_WREADY : IN STD_LOGIC;
    m_axi_out_bus_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_bus_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_bus_WLAST : OUT STD_LOGIC;
    m_axi_out_bus_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_ARVALID : OUT STD_LOGIC;
    m_axi_out_bus_ARREADY : IN STD_LOGIC;
    m_axi_out_bus_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_bus_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_bus_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_bus_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_bus_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_bus_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_bus_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_bus_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_bus_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_bus_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_RVALID : IN STD_LOGIC;
    m_axi_out_bus_RREADY : OUT STD_LOGIC;
    m_axi_out_bus_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_bus_RLAST : IN STD_LOGIC;
    m_axi_out_bus_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_out_bus_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_bus_BVALID : IN STD_LOGIC;
    m_axi_out_bus_BREADY : OUT STD_LOGIC;
    m_axi_out_bus_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_bus_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_bus_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln72 : IN STD_LOGIC_VECTOR (21 downto 0);
    in_bus_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_bus_TREADY : OUT STD_LOGIC;
    in_bus_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_bus_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_bus_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of waterfall_sender_waterfall_sender_Pipeline_VITIS_LOOP_72_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal icmp_ln93_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_bus_blk_n_W : STD_LOGIC;
    signal in_bus_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_data_V_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal item_count_reg_fu_70 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln93_fu_134_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component waterfall_sender_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component waterfall_sender_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    item_count_reg_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_bus_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                item_count_reg_fu_70 <= ap_const_lv12_0;
            elsif ((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (icmp_ln93_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                item_count_reg_fu_70 <= add_ln93_fu_134_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_bus_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_data_V_reg_163 <= in_bus_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, in_bus_TVALID, m_axi_out_bus_WREADY, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_bus_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln93_fu_134_p2 <= std_logic_vector(unsigned(item_count_reg_fu_70) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(in_bus_TVALID, ap_start_int)
    begin
        if (((in_bus_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(in_bus_TVALID, m_axi_out_bus_WREADY)
    begin
        if (((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in_bus_TVALID, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((in_bus_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(in_bus_TVALID)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (in_bus_TVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_state2, in_bus_TVALID, m_axi_out_bus_WREADY, icmp_ln93_fu_140_p2)
    begin
        if ((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (icmp_ln93_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state2, in_bus_TVALID, m_axi_out_bus_WREADY, ap_loop_exit_ready, ap_done_reg)
    begin
        if ((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2, in_bus_TVALID, m_axi_out_bus_WREADY)
    begin
        if ((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln93_fu_140_p2 <= "1" when (item_count_reg_fu_70 = ap_const_lv12_FFF) else "0";

    in_bus_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, in_bus_TVALID, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            in_bus_TDATA_blk_n <= in_bus_TVALID;
        else 
            in_bus_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_bus_TREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, in_bus_TVALID, m_axi_out_bus_WREADY, ap_start_int)
    begin
        if (((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((in_bus_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_bus_TREADY <= ap_const_logic_1;
        else 
            in_bus_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_out_bus_ARADDR <= ap_const_lv64_0;
    m_axi_out_bus_ARBURST <= ap_const_lv2_0;
    m_axi_out_bus_ARCACHE <= ap_const_lv4_0;
    m_axi_out_bus_ARID <= ap_const_lv1_0;
    m_axi_out_bus_ARLEN <= ap_const_lv32_0;
    m_axi_out_bus_ARLOCK <= ap_const_lv2_0;
    m_axi_out_bus_ARPROT <= ap_const_lv3_0;
    m_axi_out_bus_ARQOS <= ap_const_lv4_0;
    m_axi_out_bus_ARREGION <= ap_const_lv4_0;
    m_axi_out_bus_ARSIZE <= ap_const_lv3_0;
    m_axi_out_bus_ARUSER <= ap_const_lv1_0;
    m_axi_out_bus_ARVALID <= ap_const_logic_0;
    m_axi_out_bus_AWADDR <= ap_const_lv64_0;
    m_axi_out_bus_AWBURST <= ap_const_lv2_0;
    m_axi_out_bus_AWCACHE <= ap_const_lv4_0;
    m_axi_out_bus_AWID <= ap_const_lv1_0;
    m_axi_out_bus_AWLEN <= ap_const_lv32_0;
    m_axi_out_bus_AWLOCK <= ap_const_lv2_0;
    m_axi_out_bus_AWPROT <= ap_const_lv3_0;
    m_axi_out_bus_AWQOS <= ap_const_lv4_0;
    m_axi_out_bus_AWREGION <= ap_const_lv4_0;
    m_axi_out_bus_AWSIZE <= ap_const_lv3_0;
    m_axi_out_bus_AWUSER <= ap_const_lv1_0;
    m_axi_out_bus_AWVALID <= ap_const_logic_0;
    m_axi_out_bus_BREADY <= ap_const_logic_0;
    m_axi_out_bus_RREADY <= ap_const_logic_0;
    m_axi_out_bus_WDATA <= (in_bus_TDATA & tmp_data_V_reg_163);
    m_axi_out_bus_WID <= ap_const_lv1_0;
    m_axi_out_bus_WLAST <= ap_const_logic_0;
    m_axi_out_bus_WSTRB <= ap_const_lv8_FF;
    m_axi_out_bus_WUSER <= ap_const_lv1_0;

    m_axi_out_bus_WVALID_assign_proc : process(ap_CS_fsm_state2, in_bus_TVALID, m_axi_out_bus_WREADY)
    begin
        if ((not(((m_axi_out_bus_WREADY = ap_const_logic_0) or (in_bus_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_out_bus_WVALID <= ap_const_logic_1;
        else 
            m_axi_out_bus_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_bus_blk_n_W_assign_proc : process(ap_CS_fsm_state2, m_axi_out_bus_WREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_bus_blk_n_W <= m_axi_out_bus_WREADY;
        else 
            out_bus_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

end behav;
